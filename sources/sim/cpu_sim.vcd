$version Generated by VerilatedVcd $end
$timescale 1ps $end
 $scope module TOP $end
  $scope module CPU $end
   $var wire 1 w cpuclk $end
   $var wire 1 x memclk $end
   $var wire 1 y rst $end
   $var wire 8 z switches [7:0] $end
   $var wire 32 { uart_data [31:0] $end
   $var wire 32 | uart_addr [31:0] $end
   $var wire 1 } uart_finish $end
   $var wire 32 % led_out [31:0] $end
   $var wire 1 + PC_Write $end
   $var wire 32 !! new_pc [31:0] $end
   $var wire 32 "! IF_pc_in [31:0] $end
   $scope module pc_inst $end
    $var wire 1 w clk $end
    $var wire 1 y rst $end
    $var wire 1 + PC_Write $end
    $var wire 32 !! new_pc [31:0] $end
    $var wire 32 "! pc_out [31:0] $end
    $var wire 32 "! pc [31:0] $end
   $upscope $end
   $var wire 32 "! IF_pc_out [31:0] $end
   $var wire 32 #! IF_inst_out [31:0] $end
   $var wire 32 "! mem_pc [31:0] $end
   $var wire 32 #! mem_inst [31:0] $end
   $var wire 1 + IF_ID_Write $end
   $var wire 1 , flush $end
   $var wire 1 - predict_fail $end
   $var wire 32 . ID_inst_in [31:0] $end
   $var wire 32 / ID_pc_in [31:0] $end
   $var wire 5 0 ID_EX_rd [4:0] $end
   $var wire 5 1 MEM_WB_rd [4:0] $end
   $var wire 1 2 EX_old_predict_out $end
   $var wire 1 3 EX_old_branch_out $end
   $var wire 1 4 EX_branch_result_out $end
   $var wire 1 5 ID_EX_MemRead $end
   $var wire 1 6 MEM_WB_RegWrite $end
   $var wire 32 7 EX_old_pc_out [31:0] $end
   $var wire 32 8 WB_data_out [31:0] $end
   $var wire 32 9 ID_old_branch_pc [31:0] $end
   $var wire 8 : IF_EX_ctrl_out [7:0] $end
   $var wire 5 ; IF_MEM_ctrl_out [4:0] $end
   $var wire 3 < IF_WB_ctrl_out [2:0] $end
   $var wire 5 = ID_rs1_out [4:0] $end
   $var wire 5 > ID_rs2_out [4:0] $end
   $var wire 5 ? ID_rd_out [4:0] $end
   $var wire 32 $! ID_data1_out [31:0] $end
   $var wire 32 %! ID_data2_out [31:0] $end
   $var wire 32 @ ID_imm_out [31:0] $end
   $var wire 32 / ID_pc_out [31:0] $end
   $var wire 1 &! ID_predict_result_out $end
   $scope module id_inst $end
    $var wire 1 w clk $end
    $var wire 1 y rst $end
    $var wire 32 / pc_in [31:0] $end
    $var wire 32 . inst [31:0] $end
    $var wire 5 0 ID_EX_rd [4:0] $end
    $var wire 5 1 MEM_WB_rd [4:0] $end
    $var wire 1 2 old_predict $end
    $var wire 1 3 old_branch $end
    $var wire 1 4 branch_result $end
    $var wire 32 7 old_pc [31:0] $end
    $var wire 32 9 old_branch_pc [31:0] $end
    $var wire 1 5 ID_EX_MemRead $end
    $var wire 32 8 data_WB [31:0] $end
    $var wire 1 6 RegWrite $end
    $var wire 8 : EX_ctrl [7:0] $end
    $var wire 5 ; MEM_ctrl [4:0] $end
    $var wire 3 < WB_ctrl [2:0] $end
    $var wire 5 = rs1_out [4:0] $end
    $var wire 5 > rs2_out [4:0] $end
    $var wire 5 ? rd_out [4:0] $end
    $var wire 32 $! reg_data1 [31:0] $end
    $var wire 32 %! reg_data2 [31:0] $end
    $var wire 32 @ imm_out [31:0] $end
    $var wire 32 / pc_out [31:0] $end
    $var wire 1 + IF_ID_Write $end
    $var wire 1 + PC_Write $end
    $var wire 1 &! predict_result $end
    $var wire 1 - predict_fail $end
    $var wire 32 !! new_pc [31:0] $end
    $var wire 5 = rs1 [4:0] $end
    $var wire 5 > rs2 [4:0] $end
    $var wire 5 ? rd [4:0] $end
    $var wire 1 b stall $end
    $var wire 1 c branch $end
    $var wire 1 d predict $end
    $var wire 1 e ujtype $end
    $var wire 16 f total_ctrl [15:0] $end
    $var wire 16 g ctrl_out [15:0] $end
    $var wire 32 $! rs1_data [31:0] $end
    $var wire 32 %! rs2_data [31:0] $end
    $var wire 32 @ imm [31:0] $end
    $scope module reg_inst $end
     $var wire 1 w clk $end
     $var wire 1 y rst $end
     $var wire 5 = read_reg_1 [4:0] $end
     $var wire 5 > read_reg_2 [4:0] $end
     $var wire 5 1 write_reg [4:0] $end
     $var wire 32 8 write_data [31:0] $end
     $var wire 1 6 RegWrite $end
     $var wire 32 $! read_data_1 [31:0] $end
     $var wire 32 %! read_data_2 [31:0] $end
     $var wire 32 /! regs[0] [31:0] $end
     $var wire 32 0! regs[1] [31:0] $end
     $var wire 32 1! regs[2] [31:0] $end
     $var wire 32 2! regs[3] [31:0] $end
     $var wire 32 3! regs[4] [31:0] $end
     $var wire 32 4! regs[5] [31:0] $end
     $var wire 32 5! regs[6] [31:0] $end
     $var wire 32 6! regs[7] [31:0] $end
     $var wire 32 7! regs[8] [31:0] $end
     $var wire 32 8! regs[9] [31:0] $end
     $var wire 32 9! regs[10] [31:0] $end
     $var wire 32 :! regs[11] [31:0] $end
     $var wire 32 ;! regs[12] [31:0] $end
     $var wire 32 <! regs[13] [31:0] $end
     $var wire 32 =! regs[14] [31:0] $end
     $var wire 32 >! regs[15] [31:0] $end
     $var wire 32 ?! regs[16] [31:0] $end
     $var wire 32 @! regs[17] [31:0] $end
     $var wire 32 A! regs[18] [31:0] $end
     $var wire 32 B! regs[19] [31:0] $end
     $var wire 32 C! regs[20] [31:0] $end
     $var wire 32 D! regs[21] [31:0] $end
     $var wire 32 E! regs[22] [31:0] $end
     $var wire 32 F! regs[23] [31:0] $end
     $var wire 32 G! regs[24] [31:0] $end
     $var wire 32 H! regs[25] [31:0] $end
     $var wire 32 I! regs[26] [31:0] $end
     $var wire 32 J! regs[27] [31:0] $end
     $var wire 32 K! regs[28] [31:0] $end
     $var wire 32 L! regs[29] [31:0] $end
     $var wire 32 M! regs[30] [31:0] $end
     $var wire 32 N! regs[31] [31:0] $end
     $scope module unnamedblk1 $end
      $var wire 32 $ i [31:0] $end
     $upscope $end
     $scope module unnamedblk2 $end
      $var wire 32 O! i [31:0] $end
     $upscope $end
    $upscope $end
    $scope module bp_inst $end
     $var wire 1 w clk $end
     $var wire 1 y rst $end
     $var wire 1 c branch $end
     $var wire 1 d predict $end
     $var wire 32 $! rs1_data [31:0] $end
     $var wire 1 e ujtype $end
     $var wire 32 / pc [31:0] $end
     $var wire 32 @ imm [31:0] $end
     $var wire 32 7 old_pc [31:0] $end
     $var wire 32 9 old_branch_pc [31:0] $end
     $var wire 1 2 old_predict $end
     $var wire 1 4 old_actual $end
     $var wire 1 3 old_branch $end
     $var wire 32 !! target_pc [31:0] $end
     $var wire 1 &! predict_result $end
     $var wire 1 - predict_fail $end
     $var wire 1 h start_flag $end
     $var wire 10 i table_addr [9:0] $end
     $var wire 10 j update_addr [9:0] $end
     $scope module Update_Table $end
      $scope module unnamedblk2 $end
       $var wire 32 k i [31:0] $end
      $upscope $end
     $upscope $end
     $scope module unnamedblk1 $end
      $var wire 32 # i [31:0] $end
     $upscope $end
    $upscope $end
    $scope module ctrl_unit $end
     $var wire 32 . inst [31:0] $end
     $var wire 16 f total_ctrl [15:0] $end
     $var wire 1 c branch $end
     $var wire 1 d predict $end
     $var wire 1 e ujtype $end
     $var wire 4 l ALUOp [3:0] $end
     $var wire 3 m BRUOp [2:0] $end
     $var wire 1 n ALUSrc $end
     $var wire 1 o MemWrite $end
     $var wire 1 p MemRead $end
     $var wire 1 q RegWrite $end
     $var wire 1 p MemtoReg $end
     $var wire 1 r jal $end
     $var wire 8 s EX_ctrl [7:0] $end
     $var wire 5 t MEM_ctrl [4:0] $end
     $var wire 3 u WB_ctrl [2:0] $end
     $var wire 3 v LDST [2:0] $end
    $upscope $end
    $scope module hazard_inst $end
     $var wire 5 = IF_ID_rs1 [4:0] $end
     $var wire 5 > IF_ID_rs2 [4:0] $end
     $var wire 5 0 ID_EX_rd [4:0] $end
     $var wire 1 5 ID_EX_MemRead $end
     $var wire 1 b stall $end
     $var wire 1 + IF_ID_Write $end
     $var wire 1 + PC_Write $end
    $upscope $end
    $scope module immgen_inst $end
     $var wire 32 . inst [31:0] $end
     $var wire 32 @ imm [31:0] $end
    $upscope $end
   $upscope $end
   $var wire 32 9 EX_pc_in [31:0] $end
   $var wire 32 A EX_data1_in [31:0] $end
   $var wire 32 B EX_data2_in [31:0] $end
   $var wire 32 C EX_imm_in [31:0] $end
   $var wire 5 0 EX_rd_in [4:0] $end
   $var wire 5 D EX_rs1_in [4:0] $end
   $var wire 5 E EX_rs2_in [4:0] $end
   $var wire 1 2 EX_predict_result_in $end
   $var wire 8 F EX_EX_ctrl_in [7:0] $end
   $var wire 5 G EX_MEM_ctrl_in [4:0] $end
   $var wire 3 H EX_WB_ctrl_in [2:0] $end
   $var wire 32 I MEMtoEX_data [31:0] $end
   $var wire 5 J MEM_rd_in [4:0] $end
   $var wire 5 0 EX_rd_out [4:0] $end
   $var wire 1 K EX_MEM_RegWrite $end
   $var wire 32 L EX_data_out [31:0] $end
   $var wire 32 M EX_ALU_res_out [31:0] $end
   $var wire 32 N EX_pc_4_out [31:0] $end
   $var wire 5 G EX_MEM_ctrl_out [4:0] $end
   $var wire 3 H EX_WB_ctrl_out [2:0] $end
   $var wire 32 I MEM_data1_in [31:0] $end
   $var wire 32 O MEM_data2_in [31:0] $end
   $var wire 32 P MEM_pc_4_in [31:0] $end
   $var wire 5 Q MEM_MEM_ctrl_in [4:0] $end
   $var wire 3 R MEM_WB_ctrl_in [2:0] $end
   $var wire 5 J MEM_rd_out [4:0] $end
   $var wire 32 I MEM_data1_out [31:0] $end
   $var wire 32 '! MEM_data2_out [31:0] $end
   $var wire 32 P MEM_pc_4_out [31:0] $end
   $var wire 3 R MEM_WB_ctrl_out [2:0] $end
   $var wire 32 I mem_addr [31:0] $end
   $var wire 32 O mem_write_data [31:0] $end
   $var wire 32 '! mem_data [31:0] $end
   $var wire 1 S MemWrite $end
   $var wire 1 (! web $end
   $var wire 3 T LDST [2:0] $end
   $var wire 32 U WB_data1_in [31:0] $end
   $var wire 32 V WB_data2_in [31:0] $end
   $var wire 32 W WB_pc_4_in [31:0] $end
   $var wire 3 X WB_WB_ctrl_in [2:0] $end
   $var wire 32 & uart_mem_data [31:0] $end
   $var wire 32 ' uart_mem_addr [31:0] $end
   $var wire 3 ( uart_LDST [2:0] $end
   $scope module memory_inst $end
    $var wire 1 x clka $end
    $var wire 1 x clkb $end
    $var wire 3 ( LDST [2:0] $end
    $var wire 32 "! addra [31:0] $end
    $var wire 32 ' addrb [31:0] $end
    $var wire 32 & write_datab [31:0] $end
    $var wire 1 (! web $end
    $var wire 32 #! dataa [31:0] $end
    $var wire 32 '! datab [31:0] $end
    $var wire 8 z switches [7:0] $end
    $var wire 32 % led_out [31:0] $end
    $var wire 2 )! cnt [1:0] $end
    $var wire 1 *! we $end
    $var wire 32 +! wdatab [31:0] $end
    $var wire 32 ,! rdatab [31:0] $end
    $var wire 32 -! datab_mem [31:0] $end
    $var wire 32 .! datab_io [31:0] $end
    $var wire 1 ) bool_io $end
    $scope module test_inst $end
     $var wire 1 P! clka $end
     $var wire 1 P! clkb $end
     $var wire 14 Q! addra [13:0] $end
     $var wire 14 * addrb [13:0] $end
     $var wire 32 R! write_datab [31:0] $end
     $var wire 1 S! web $end
     $var wire 32 #! dataa [31:0] $end
     $var wire 32 ,! datab [31:0] $end
     $var wire 32 T! dataa_temp [31:0] $end
     $var wire 32 U! datab_temp [31:0] $end
    $upscope $end
    $var wire 32 % led [31:0] $end
   $upscope $end
   $scope module ex_inst $end
    $var wire 8 F EX_ctrl_in [7:0] $end
    $var wire 5 G MEM_ctrl_in [4:0] $end
    $var wire 3 H WB_ctrl_in [2:0] $end
    $var wire 32 A reg_data1 [31:0] $end
    $var wire 32 B reg_data2 [31:0] $end
    $var wire 32 C imm [31:0] $end
    $var wire 32 9 pc [31:0] $end
    $var wire 32 I EX_MEM_data [31:0] $end
    $var wire 32 8 MEM_WB_data [31:0] $end
    $var wire 5 D ID_EX_rs1 [4:0] $end
    $var wire 5 E ID_EX_rs2 [4:0] $end
    $var wire 5 0 ID_EX_rd [4:0] $end
    $var wire 5 J EX_MEM_rd [4:0] $end
    $var wire 5 1 MEM_WB_rd [4:0] $end
    $var wire 1 K EX_MEM_RegWrite $end
    $var wire 1 6 MEM_WB_RegWrite $end
    $var wire 1 2 old_predict_in $end
    $var wire 32 L data_out [31:0] $end
    $var wire 32 M write_addr [31:0] $end
    $var wire 5 0 EX_rd_out [4:0] $end
    $var wire 32 N pc_4 [31:0] $end
    $var wire 5 G MEM_ctrl_out [4:0] $end
    $var wire 3 H WB_ctrl_out [2:0] $end
    $var wire 5 0 ID_EX_rd_out [4:0] $end
    $var wire 1 5 ID_EX_MemRead $end
    $var wire 1 4 branch_result $end
    $var wire 1 3 old_branch $end
    $var wire 1 2 old_predict $end
    $var wire 32 7 old_pc [31:0] $end
    $var wire 4 Y ALU_op [3:0] $end
    $var wire 1 Z ALU_src $end
    $var wire 3 [ BRU_op [2:0] $end
    $var wire 32 \ src1 [31:0] $end
    $var wire 32 ] src2 [31:0] $end
    $var wire 32 L src2_mux [31:0] $end
    $var wire 2 ^ fwA [1:0] $end
    $var wire 2 _ fwB [1:0] $end
    $scope module alu_unit $end
     $var wire 32 \ src1 [31:0] $end
     $var wire 32 ] src2 [31:0] $end
     $var wire 4 Y ALU_op [3:0] $end
     $var wire 32 M result [31:0] $end
    $upscope $end
    $scope module bru_unit $end
     $var wire 32 \ src1 [31:0] $end
     $var wire 32 L src2 [31:0] $end
     $var wire 32 9 pc [31:0] $end
     $var wire 32 C imm [31:0] $end
     $var wire 3 [ BRU_op [2:0] $end
     $var wire 32 7 old_pc [31:0] $end
     $var wire 32 N pc_4 [31:0] $end
     $var wire 1 3 old_branch $end
     $var wire 1 4 result $end
    $upscope $end
    $scope module forward_unit $end
     $var wire 5 D ID_EX_rs1 [4:0] $end
     $var wire 5 E ID_EX_rs2 [4:0] $end
     $var wire 5 J EX_MEM_rd [4:0] $end
     $var wire 5 1 MEM_WB_rd [4:0] $end
     $var wire 1 K EX_MEM_RegWrite $end
     $var wire 1 6 MEM_WB_RegWrite $end
     $var wire 2 ^ fwA [1:0] $end
     $var wire 2 _ fwB [1:0] $end
    $upscope $end
   $upscope $end
   $scope module ex_mem_inst $end
    $var wire 1 w clk $end
    $var wire 1 y rst $end
    $var wire 32 M ALUres_in [31:0] $end
    $var wire 32 L data2_in [31:0] $end
    $var wire 32 N pc_4_in [31:0] $end
    $var wire 5 0 rd_in [4:0] $end
    $var wire 32 I ALUres_out [31:0] $end
    $var wire 32 O data2_out [31:0] $end
    $var wire 32 P pc_4_out [31:0] $end
    $var wire 5 J rd_out [4:0] $end
    $var wire 5 G MEM_ctrl_in [4:0] $end
    $var wire 3 H WB_ctrl_in [2:0] $end
    $var wire 5 Q MEM_ctrl_out [4:0] $end
    $var wire 3 R WB_ctrl_out [2:0] $end
    $var wire 32 I ALUres [31:0] $end
    $var wire 32 O data2 [31:0] $end
    $var wire 5 J rd [4:0] $end
    $var wire 5 Q MEM_ctrl [4:0] $end
    $var wire 3 R WB_ctrl [2:0] $end
    $var wire 32 P pc_4 [31:0] $end
   $upscope $end
   $scope module id_ex_inst $end
    $var wire 1 w clk $end
    $var wire 1 y rst $end
    $var wire 32 / pc_in [31:0] $end
    $var wire 32 $! data1_in [31:0] $end
    $var wire 32 %! data2_in [31:0] $end
    $var wire 32 @ imm_in [31:0] $end
    $var wire 5 ? rd_in [4:0] $end
    $var wire 5 = rs1_in [4:0] $end
    $var wire 5 > rs2_in [4:0] $end
    $var wire 1 , flush $end
    $var wire 1 &! predict_result_in $end
    $var wire 32 9 pc_out [31:0] $end
    $var wire 32 A data1_out [31:0] $end
    $var wire 32 B data2_out [31:0] $end
    $var wire 32 C imm_out [31:0] $end
    $var wire 5 0 rd_out [4:0] $end
    $var wire 5 D rs1_out [4:0] $end
    $var wire 5 E rs2_out [4:0] $end
    $var wire 1 2 predict_result_out $end
    $var wire 8 : EX_ctrl_in [7:0] $end
    $var wire 5 ; MEM_ctrl_in [4:0] $end
    $var wire 3 < WB_ctrl_in [2:0] $end
    $var wire 8 F EX_ctrl_out [7:0] $end
    $var wire 5 G MEM_ctrl_out [4:0] $end
    $var wire 3 H WB_ctrl_out [2:0] $end
    $var wire 32 9 pc [31:0] $end
    $var wire 32 A data1 [31:0] $end
    $var wire 32 B data2 [31:0] $end
    $var wire 32 C imm [31:0] $end
    $var wire 5 0 rd [4:0] $end
    $var wire 5 D rs1 [4:0] $end
    $var wire 5 E rs2 [4:0] $end
    $var wire 1 2 predict_result $end
    $var wire 8 F EX_ctrl [7:0] $end
    $var wire 5 G MEM_ctrl [4:0] $end
    $var wire 3 H WB_ctrl [2:0] $end
   $upscope $end
   $scope module if_id_inst $end
    $var wire 1 w clk $end
    $var wire 1 y rst $end
    $var wire 32 #! inst_in [31:0] $end
    $var wire 32 "! pc_in [31:0] $end
    $var wire 32 . inst_out [31:0] $end
    $var wire 32 / pc_out [31:0] $end
    $var wire 32 . inst [31:0] $end
    $var wire 32 / pc [31:0] $end
   $upscope $end
   $scope module if_inst $end
    $var wire 32 "! new_pc [31:0] $end
    $var wire 32 "! pc_out [31:0] $end
    $var wire 32 #! inst [31:0] $end
    $var wire 32 #! mem_inst [31:0] $end
    $var wire 32 "! mem_pc [31:0] $end
   $upscope $end
   $scope module mem_instance $end
    $var wire 5 Q MEM_ctrl_in [4:0] $end
    $var wire 3 R WB_ctrl_in [2:0] $end
    $var wire 32 I write_addr [31:0] $end
    $var wire 32 O write_data [31:0] $end
    $var wire 5 J EX_MEM_rd [4:0] $end
    $var wire 32 P pc_4 [31:0] $end
    $var wire 5 J MEM_rd_out [4:0] $end
    $var wire 32 I addr_out [31:0] $end
    $var wire 32 '! data_out [31:0] $end
    $var wire 3 R WB_ctrl_out [2:0] $end
    $var wire 32 P pc_4_out [31:0] $end
    $var wire 32 I mem_addr [31:0] $end
    $var wire 32 O mem_write_data [31:0] $end
    $var wire 1 S MemWrite $end
    $var wire 3 T LDST [2:0] $end
    $var wire 32 '! mem_data [31:0] $end
   $upscope $end
   $scope module mem_wb_inst $end
    $var wire 1 w clk $end
    $var wire 1 y rst $end
    $var wire 32 I addr_in [31:0] $end
    $var wire 32 '! data_in [31:0] $end
    $var wire 32 P pc_4_in [31:0] $end
    $var wire 5 J rd_in [4:0] $end
    $var wire 32 U addr_out [31:0] $end
    $var wire 32 V data_out [31:0] $end
    $var wire 32 W pc_4_out [31:0] $end
    $var wire 5 1 rd_out [4:0] $end
    $var wire 3 R WB_ctrl_in [2:0] $end
    $var wire 3 X WB_ctrl_out [2:0] $end
    $var wire 32 U addr [31:0] $end
    $var wire 32 V data [31:0] $end
    $var wire 5 1 rd [4:0] $end
    $var wire 3 X WB_ctrl [2:0] $end
    $var wire 32 W pc_4 [31:0] $end
   $upscope $end
   $scope module wb_inst $end
    $var wire 3 X WB_ctrl [2:0] $end
    $var wire 32 V data [31:0] $end
    $var wire 32 U ALU_res [31:0] $end
    $var wire 32 W pc_4 [31:0] $end
    $var wire 32 8 write_data [31:0] $end
    $var wire 1 ` MemtoReg $end
    $var wire 1 a jal $end
   $upscope $end
  $upscope $end
  $var wire 1 w cpuclk $end
  $var wire 1 x memclk $end
  $var wire 1 y rst $end
  $var wire 8 z switches [7:0] $end
  $var wire 32 { uart_data [31:0] $end
  $var wire 32 | uart_addr [31:0] $end
  $var wire 1 } uart_finish $end
  $var wire 32 ~ led_out [31:0] $end
 $upscope $end
$enddefinitions $end


#1
b00000000000000000000010000000000 #
b00000000000000000000000000100000 $
b00000000000000000000000000000000 %
b00000000110100110000001100010011 &
b00000000000000000000000000000000 '
b111 (
0)
b00000000000000 *
0+
0,
0-
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000 0
b00000 1
02
03
04
05
06
b00000000000000000000000000000100 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000 :
b00000 ;
b000 <
b00000 =
b00000 >
b00000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000 D
b00000 E
b00000000 F
b00000 G
b000 H
b00000000000000000000000000000000 I
b00000 J
0K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000100 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000 Q
b000 R
0S
b000 T
b00000000000000000000000000000000 U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b000 X
b0000 Y
0Z
b000 [
b00000000000000000000000000000000 \
b00000000000000000000000000000000 ]
b00 ^
b00 _
0`
0a
0b
0c
0d
0e
b0000000000000000 f
b0000000000000000 g
0h
b0000000000 i
b0000000000 j
b00000000000000000000000000000000 k
b0000 l
b000 m
0n
0o
0p
0q
0r
b00000000 s
b00000 t
b000 u
b000 v
0w
0x
0y
b00000000 z
b00000000110100110000001100010011 {
b00000000000000000000000000000000 |
0}
b00000000000000000000000000000000 ~
b00000000000000000000000000000000 !!
b00000000000000000000000000000000 "!
b00000000000000000000000000000000 #!
b00000000000000000000000000000000 $!
b00000000000000000000000000000000 %!
0&!
b00000000000000000000000000000000 '!
1(!
b00 )!
0*!
b00000000110100110000001100010011 +!
b00000000000000000000000000000000 ,!
b00000000000000000000000000000000 -!
b00000000000000000000000000000000 .!
b00000000000000000000000000000000 /!
b00000000000000000000000000000000 0!
b01111111111111111110111111111100 1!
b11111111111111111111111100000000 2!
b00000000000000000000000000000000 3!
b00000000000000000000000000000000 4!
b00000000000000000000000000000000 5!
b00000000000000000000000000000000 6!
b00000000000000000000000000000000 7!
b00000000000000000000000000000000 8!
b00000000000000000000000000000000 9!
b00000000000000000000000000000000 :!
b00000000000000000000000000000000 ;!
b00000000000000000000000000000000 <!
b00000000000000000000000000000000 =!
b00000000000000000000000000000000 >!
b00000000000000000000000000000000 ?!
b00000000000000000000000000000000 @!
b00000000000000000000000000000000 A!
b00000000000000000000000000000000 B!
b00000000000000000000000000000000 C!
b00000000000000000000000000000000 D!
b00000000000000000000000000000000 E!
b00000000000000000000000000000000 F!
b00000000000000000000000000000000 G!
b00000000000000000000000000000000 H!
b00000000000000000000000000000000 I!
b00000000000000000000000000000000 J!
b00000000000000000000000000000000 K!
b00000000000000000000000000000000 L!
b00000000000000000000000000000000 M!
b00000000000000000000000000000000 N!
b00000000000000000000000000000000 O!
1P!
b00000000000000 Q!
b00000000110100110000001100010011 R!
0S!
b00000000000000000000000000000000 T!
b00000000000000000000000000000000 U!
#2
1x
b01 )!
0P!
#3
0x
1P!
#4
1x
b10 )!
0P!
#5
0x
1P!
#6
1x
b11 )!
1*!
0P!
1S!
#7
0x
1P!
b00000000110100110000001100010011 U!
#8
1x
b00 )!
0*!
0P!
0S!
#9
0x
b00000000110100110000001100010011 '!
b00000000110100110000001100010011 ,!
b00000000110100110000001100010011 -!
1P!
b00000000110100110000001100010011 T!
#10
1x
b01 )!
0P!
#11
0x
b00000000110100110000001100010011 #!
1P!
#12
1x
b10 )!
0P!
#13
b00000000110100110000001100010011 .
b00000111 :
b010 <
b00110 =
b01101 >
b00110 ?
b00000000000000000000000000001101 @
b00000000000000000000000000000100 P
b00000000110100110000001100010011 V
b0000011100000010 f
b0000011100000010 g
1h
b0011 l
1n
1q
b00000111 s
b010 u
1w
0x
b00000000000000000000000000000100 !!
1P!
#14
1x
b11 )!
1*!
0P!
1S!
#15
0x
1P!
#16
1x
b00 )!
0*!
0P!
0S!
#17
0w
0x
b00000000000000000000000000000100 "!
1P!
b00000000000001 Q!
b00000000000000000000000000000000 T!
#18
1x
b01 )!
0P!
#19
0x
b00000000000000000000000000000000 #!
1P!
#20
1x
b10 )!
0P!
#21
b00000000000000000000000000000000 .
b00000000000000000000000000000100 /
b00110 0
b00000000 :
b000 <
b00000 =
b00000 >
b00000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000001101 C
b00110 D
b01101 E
b00000111 F
b010 H
b00000000000000000000000000001101 M
b00000000000000000000000000000100 W
b0011 Y
1Z
b00000000000000000000000000001101 ]
b0000000000000000 f
b0000000000000000 g
b0000000001 i
b0000 l
0n
0q
b00000000 s
b000 u
1w
0x
b00000000000000000000000000001000 !!
1P!
#22
1x
b11 )!
1*!
0P!
1S!
#23
0x
1P!
#24
1x
b00 )!
0*!
0P!
0S!
#25
0w
0x
b00000000000000000000000000001000 "!
1P!
b00000000000010 Q!
#26
1x
b01 )!
0P!
#27
0x
1P!
#28
1x
b10 )!
0P!
#29
b00000000000000000000000000001000 /
b00000 0
b00000000000000000000000000001000 7
b00000000000000000000000000000100 9
b00000000000000000000000000000000 C
b00000 D
b00000 E
b00000000 F
b000 H
b00000000000000000000000000001101 I
b00110 J
1K
b00000000000000000000000000000000 M
b00000000000000000000000000001000 N
b010 R
b0000 Y
0Z
b00000000000000000000000000000000 ]
b0000000010 i
b0000000001 j
1w
0x
b00000000000000000000000000001100 !!
1P!
#30
1x
b11 )!
1*!
0P!
1S!
#31
0x
1P!
#32
1x
b00 )!
0*!
0P!
0S!
#33
0w
0x
b00000000000000000000000000001100 "!
1P!
b00000000000011 Q!
#34
1x
b01 )!
0P!
#35
0x
1P!
#36
1x
b10 )!
0P!
#37
b00000000000000000000000000001100 /
b00110 1
16
b00000000000000000000000000001100 7
b00000000000000000000000000001101 8
b00000000000000000000000000001000 9
b00000000000000000000000000000000 I
b00000 J
0K
b00000000000000000000000000001100 N
b00000000000000000000000000001000 P
b000 R
b00000000000000000000000000001101 U
b010 X
b0000000011 i
b0000000010 j
1w
0x
b00000000000000000000000000010000 !!
1P!
#38
1x
b11 )!
1*!
0P!
1S!
#39
0x
1P!
#40
1x
b00 )!
0*!
0P!
0S!
#41
0w
0x
b00000000000000000000000000010000 "!
b00000000000000000000000000001101 5!
1P!
b00000000000100 Q!
#42
1x
b01 )!
0P!
#43
0x
1P!
#44
1x
b10 )!
0P!
#45
b00000000000000000000000000010000 /
b00000 1
06
b00000000000000000000000000010000 7
b00000000000000000000000000000000 8
b00000000000000000000000000001100 9
b00000000000000000000000000010000 N
b00000000000000000000000000001100 P
b00000000000000000000000000000000 U
b00000000000000000000000000001000 W
b000 X
b0000000100 i
b0000000011 j
1w
0x
b00000000000000000000000000010100 !!
1P!
#46
1x
b11 )!
1*!
0P!
1S!
#47
0x
1P!
#48
1x
b00 )!
0*!
0P!
0S!
#49
0w
0x
b00000000000000000000000000010100 "!
1P!
b00000000000101 Q!
#50
1x
b01 )!
0P!
#51
0x
1P!
#52
1x
b10 )!
0P!
#53
b00000000000000000000000000010100 /
b00000000000000000000000000010100 7
b00000000000000000000000000010000 9
b00000000000000000000000000010100 N
b00000000000000000000000000010000 P
b00000000000000000000000000001100 W
b0000000101 i
b0000000100 j
1w
0x
b00000000000000000000000000011000 !!
1P!
#54
1x
b11 )!
1*!
0P!
1S!
#55
0x
1P!
#56
1x
b00 )!
0*!
0P!
0S!
#57
0w
0x
b00000000000000000000000000011000 "!
1P!
b00000000000110 Q!
#58
1x
b01 )!
0P!
#59
0x
1P!
#60
1x
b10 )!
0P!
#61
b00000000000000000000000000011000 /
b00000000000000000000000000011000 7
b00000000000000000000000000010100 9
b00000000000000000000000000011000 N
b00000000000000000000000000010100 P
b00000000000000000000000000010000 W
b0000000110 i
b0000000101 j
1w
0x
b00000000000000000000000000011100 !!
1P!
#62
1x
b11 )!
1*!
0P!
1S!
#63
0x
1P!
#64
1x
b00 )!
0*!
0P!
0S!
